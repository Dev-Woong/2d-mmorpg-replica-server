// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_CREATE_CHARACTER_REQUEST;
struct C_CREATE_CHARACTER_REQUESTDefaultTypeInternal;
extern C_CREATE_CHARACTER_REQUESTDefaultTypeInternal _C_CREATE_CHARACTER_REQUEST_default_instance_;
class C_JWT_LOGIN_REQUEST;
struct C_JWT_LOGIN_REQUESTDefaultTypeInternal;
extern C_JWT_LOGIN_REQUESTDefaultTypeInternal _C_JWT_LOGIN_REQUEST_default_instance_;
class S_CREATE_CHARACTER_REPLY;
struct S_CREATE_CHARACTER_REPLYDefaultTypeInternal;
extern S_CREATE_CHARACTER_REPLYDefaultTypeInternal _S_CREATE_CHARACTER_REPLY_default_instance_;
class S_JWT_LOGIN_REPLY;
struct S_JWT_LOGIN_REPLYDefaultTypeInternal;
extern S_JWT_LOGIN_REPLYDefaultTypeInternal _S_JWT_LOGIN_REPLY_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_CREATE_CHARACTER_REQUEST* Arena::CreateMaybeMessage<::Protocol::C_CREATE_CHARACTER_REQUEST>(Arena*);
template<> ::Protocol::C_JWT_LOGIN_REQUEST* Arena::CreateMaybeMessage<::Protocol::C_JWT_LOGIN_REQUEST>(Arena*);
template<> ::Protocol::S_CREATE_CHARACTER_REPLY* Arena::CreateMaybeMessage<::Protocol::S_CREATE_CHARACTER_REPLY>(Arena*);
template<> ::Protocol::S_JWT_LOGIN_REPLY* Arena::CreateMaybeMessage<::Protocol::S_JWT_LOGIN_REPLY>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_JWT_LOGIN_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_JWT_LOGIN_REQUEST) */ {
 public:
  inline C_JWT_LOGIN_REQUEST() : C_JWT_LOGIN_REQUEST(nullptr) {}
  ~C_JWT_LOGIN_REQUEST() override;
  explicit PROTOBUF_CONSTEXPR C_JWT_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_JWT_LOGIN_REQUEST(const C_JWT_LOGIN_REQUEST& from);
  C_JWT_LOGIN_REQUEST(C_JWT_LOGIN_REQUEST&& from) noexcept
    : C_JWT_LOGIN_REQUEST() {
    *this = ::std::move(from);
  }

  inline C_JWT_LOGIN_REQUEST& operator=(const C_JWT_LOGIN_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_JWT_LOGIN_REQUEST& operator=(C_JWT_LOGIN_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_JWT_LOGIN_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_JWT_LOGIN_REQUEST* internal_default_instance() {
    return reinterpret_cast<const C_JWT_LOGIN_REQUEST*>(
               &_C_JWT_LOGIN_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_JWT_LOGIN_REQUEST& a, C_JWT_LOGIN_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_JWT_LOGIN_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_JWT_LOGIN_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_JWT_LOGIN_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_JWT_LOGIN_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_JWT_LOGIN_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_JWT_LOGIN_REQUEST& from) {
    C_JWT_LOGIN_REQUEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_JWT_LOGIN_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_JWT_LOGIN_REQUEST";
  }
  protected:
  explicit C_JWT_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
  };
  // string accessToken = 1;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_JWT_LOGIN_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_JWT_LOGIN_REPLY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_JWT_LOGIN_REPLY) */ {
 public:
  inline S_JWT_LOGIN_REPLY() : S_JWT_LOGIN_REPLY(nullptr) {}
  ~S_JWT_LOGIN_REPLY() override;
  explicit PROTOBUF_CONSTEXPR S_JWT_LOGIN_REPLY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_JWT_LOGIN_REPLY(const S_JWT_LOGIN_REPLY& from);
  S_JWT_LOGIN_REPLY(S_JWT_LOGIN_REPLY&& from) noexcept
    : S_JWT_LOGIN_REPLY() {
    *this = ::std::move(from);
  }

  inline S_JWT_LOGIN_REPLY& operator=(const S_JWT_LOGIN_REPLY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JWT_LOGIN_REPLY& operator=(S_JWT_LOGIN_REPLY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JWT_LOGIN_REPLY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JWT_LOGIN_REPLY* internal_default_instance() {
    return reinterpret_cast<const S_JWT_LOGIN_REPLY*>(
               &_S_JWT_LOGIN_REPLY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_JWT_LOGIN_REPLY& a, S_JWT_LOGIN_REPLY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JWT_LOGIN_REPLY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JWT_LOGIN_REPLY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_JWT_LOGIN_REPLY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_JWT_LOGIN_REPLY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_JWT_LOGIN_REPLY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_JWT_LOGIN_REPLY& from) {
    S_JWT_LOGIN_REPLY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_JWT_LOGIN_REPLY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_JWT_LOGIN_REPLY";
  }
  protected:
  explicit S_JWT_LOGIN_REPLY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .Protocol.ELoginResult result = 1;
  void clear_result();
  ::Protocol::ELoginResult result() const;
  void set_result(::Protocol::ELoginResult value);
  private:
  ::Protocol::ELoginResult _internal_result() const;
  void _internal_set_result(::Protocol::ELoginResult value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_JWT_LOGIN_REPLY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CREATE_CHARACTER_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_CHARACTER_REQUEST) */ {
 public:
  inline C_CREATE_CHARACTER_REQUEST() : C_CREATE_CHARACTER_REQUEST(nullptr) {}
  ~C_CREATE_CHARACTER_REQUEST() override;
  explicit PROTOBUF_CONSTEXPR C_CREATE_CHARACTER_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_CHARACTER_REQUEST(const C_CREATE_CHARACTER_REQUEST& from);
  C_CREATE_CHARACTER_REQUEST(C_CREATE_CHARACTER_REQUEST&& from) noexcept
    : C_CREATE_CHARACTER_REQUEST() {
    *this = ::std::move(from);
  }

  inline C_CREATE_CHARACTER_REQUEST& operator=(const C_CREATE_CHARACTER_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_CHARACTER_REQUEST& operator=(C_CREATE_CHARACTER_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_CHARACTER_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_CHARACTER_REQUEST* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_CHARACTER_REQUEST*>(
               &_C_CREATE_CHARACTER_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CREATE_CHARACTER_REQUEST& a, C_CREATE_CHARACTER_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_CHARACTER_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_CHARACTER_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CREATE_CHARACTER_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CREATE_CHARACTER_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CREATE_CHARACTER_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CREATE_CHARACTER_REQUEST& from) {
    C_CREATE_CHARACTER_REQUEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_CHARACTER_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_CHARACTER_REQUEST";
  }
  protected:
  explicit C_CREATE_CHARACTER_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kGenderFieldNumber = 2,
    kRegionFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .Protocol.EGender gender = 2;
  void clear_gender();
  ::Protocol::EGender gender() const;
  void set_gender(::Protocol::EGender value);
  private:
  ::Protocol::EGender _internal_gender() const;
  void _internal_set_gender(::Protocol::EGender value);
  public:

  // .Protocol.ERegion region = 3;
  void clear_region();
  ::Protocol::ERegion region() const;
  void set_region(::Protocol::ERegion value);
  private:
  ::Protocol::ERegion _internal_region() const;
  void _internal_set_region(::Protocol::ERegion value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_CHARACTER_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int gender_;
    int region_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_CHARACTER_REPLY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_CHARACTER_REPLY) */ {
 public:
  inline S_CREATE_CHARACTER_REPLY() : S_CREATE_CHARACTER_REPLY(nullptr) {}
  ~S_CREATE_CHARACTER_REPLY() override;
  explicit PROTOBUF_CONSTEXPR S_CREATE_CHARACTER_REPLY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_CHARACTER_REPLY(const S_CREATE_CHARACTER_REPLY& from);
  S_CREATE_CHARACTER_REPLY(S_CREATE_CHARACTER_REPLY&& from) noexcept
    : S_CREATE_CHARACTER_REPLY() {
    *this = ::std::move(from);
  }

  inline S_CREATE_CHARACTER_REPLY& operator=(const S_CREATE_CHARACTER_REPLY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_CHARACTER_REPLY& operator=(S_CREATE_CHARACTER_REPLY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_CHARACTER_REPLY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_CHARACTER_REPLY* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_CHARACTER_REPLY*>(
               &_S_CREATE_CHARACTER_REPLY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CREATE_CHARACTER_REPLY& a, S_CREATE_CHARACTER_REPLY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_CHARACTER_REPLY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_CHARACTER_REPLY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CREATE_CHARACTER_REPLY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CREATE_CHARACTER_REPLY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CREATE_CHARACTER_REPLY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CREATE_CHARACTER_REPLY& from) {
    S_CREATE_CHARACTER_REPLY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_CHARACTER_REPLY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_CHARACTER_REPLY";
  }
  protected:
  explicit S_CREATE_CHARACTER_REPLY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string detail = 2;
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_CHARACTER_REPLY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_JWT_LOGIN_REQUEST

// string accessToken = 1;
inline void C_JWT_LOGIN_REQUEST::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& C_JWT_LOGIN_REQUEST::accesstoken() const {
  // @@protoc_insertion_point(field_get:Protocol.C_JWT_LOGIN_REQUEST.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_JWT_LOGIN_REQUEST::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_JWT_LOGIN_REQUEST.accessToken)
}
inline std::string* C_JWT_LOGIN_REQUEST::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:Protocol.C_JWT_LOGIN_REQUEST.accessToken)
  return _s;
}
inline const std::string& C_JWT_LOGIN_REQUEST::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void C_JWT_LOGIN_REQUEST::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* C_JWT_LOGIN_REQUEST::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* C_JWT_LOGIN_REQUEST::release_accesstoken() {
  // @@protoc_insertion_point(field_release:Protocol.C_JWT_LOGIN_REQUEST.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void C_JWT_LOGIN_REQUEST::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_JWT_LOGIN_REQUEST.accessToken)
}

// -------------------------------------------------------------------

// S_JWT_LOGIN_REPLY

// .Protocol.ELoginResult result = 1;
inline void S_JWT_LOGIN_REPLY::clear_result() {
  _impl_.result_ = 0;
}
inline ::Protocol::ELoginResult S_JWT_LOGIN_REPLY::_internal_result() const {
  return static_cast< ::Protocol::ELoginResult >(_impl_.result_);
}
inline ::Protocol::ELoginResult S_JWT_LOGIN_REPLY::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JWT_LOGIN_REPLY.result)
  return _internal_result();
}
inline void S_JWT_LOGIN_REPLY::_internal_set_result(::Protocol::ELoginResult value) {
  
  _impl_.result_ = value;
}
inline void S_JWT_LOGIN_REPLY::set_result(::Protocol::ELoginResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JWT_LOGIN_REPLY.result)
}

// -------------------------------------------------------------------

// C_CREATE_CHARACTER_REQUEST

// string username = 1;
inline void C_CREATE_CHARACTER_REQUEST::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& C_CREATE_CHARACTER_REQUEST::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_CHARACTER_REQUEST.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_CHARACTER_REQUEST::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_CHARACTER_REQUEST.username)
}
inline std::string* C_CREATE_CHARACTER_REQUEST::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_CHARACTER_REQUEST.username)
  return _s;
}
inline const std::string& C_CREATE_CHARACTER_REQUEST::_internal_username() const {
  return _impl_.username_.Get();
}
inline void C_CREATE_CHARACTER_REQUEST::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CREATE_CHARACTER_REQUEST::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CREATE_CHARACTER_REQUEST::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_CHARACTER_REQUEST.username)
  return _impl_.username_.Release();
}
inline void C_CREATE_CHARACTER_REQUEST::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_CHARACTER_REQUEST.username)
}

// .Protocol.EGender gender = 2;
inline void C_CREATE_CHARACTER_REQUEST::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::Protocol::EGender C_CREATE_CHARACTER_REQUEST::_internal_gender() const {
  return static_cast< ::Protocol::EGender >(_impl_.gender_);
}
inline ::Protocol::EGender C_CREATE_CHARACTER_REQUEST::gender() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_CHARACTER_REQUEST.gender)
  return _internal_gender();
}
inline void C_CREATE_CHARACTER_REQUEST::_internal_set_gender(::Protocol::EGender value) {
  
  _impl_.gender_ = value;
}
inline void C_CREATE_CHARACTER_REQUEST::set_gender(::Protocol::EGender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_CHARACTER_REQUEST.gender)
}

// .Protocol.ERegion region = 3;
inline void C_CREATE_CHARACTER_REQUEST::clear_region() {
  _impl_.region_ = 0;
}
inline ::Protocol::ERegion C_CREATE_CHARACTER_REQUEST::_internal_region() const {
  return static_cast< ::Protocol::ERegion >(_impl_.region_);
}
inline ::Protocol::ERegion C_CREATE_CHARACTER_REQUEST::region() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_CHARACTER_REQUEST.region)
  return _internal_region();
}
inline void C_CREATE_CHARACTER_REQUEST::_internal_set_region(::Protocol::ERegion value) {
  
  _impl_.region_ = value;
}
inline void C_CREATE_CHARACTER_REQUEST::set_region(::Protocol::ERegion value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_CHARACTER_REQUEST.region)
}

// -------------------------------------------------------------------

// S_CREATE_CHARACTER_REPLY

// bool success = 1;
inline void S_CREATE_CHARACTER_REPLY::clear_success() {
  _impl_.success_ = false;
}
inline bool S_CREATE_CHARACTER_REPLY::_internal_success() const {
  return _impl_.success_;
}
inline bool S_CREATE_CHARACTER_REPLY::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_CHARACTER_REPLY.success)
  return _internal_success();
}
inline void S_CREATE_CHARACTER_REPLY::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_CREATE_CHARACTER_REPLY::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_CHARACTER_REPLY.success)
}

// string detail = 2;
inline void S_CREATE_CHARACTER_REPLY::clear_detail() {
  _impl_.detail_.ClearToEmpty();
}
inline const std::string& S_CREATE_CHARACTER_REPLY::detail() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_CHARACTER_REPLY.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE_CHARACTER_REPLY::set_detail(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_CHARACTER_REPLY.detail)
}
inline std::string* S_CREATE_CHARACTER_REPLY::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_CHARACTER_REPLY.detail)
  return _s;
}
inline const std::string& S_CREATE_CHARACTER_REPLY::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void S_CREATE_CHARACTER_REPLY::_internal_set_detail(const std::string& value) {
  
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CREATE_CHARACTER_REPLY::_internal_mutable_detail() {
  
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CREATE_CHARACTER_REPLY::release_detail() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_CHARACTER_REPLY.detail)
  return _impl_.detail_.Release();
}
inline void S_CREATE_CHARACTER_REPLY::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_CHARACTER_REPLY.detail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
